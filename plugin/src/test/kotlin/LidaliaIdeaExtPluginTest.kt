/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package uk.org.lidalia.gradle.plugin.ideaext

import io.kotest.core.spec.style.StringSpec
import io.kotest.matchers.shouldBe
import org.gradle.api.Project
import org.gradle.api.plugins.ExtensionAware
import org.gradle.kotlin.dsl.getValue
import org.gradle.kotlin.dsl.provideDelegate
import org.gradle.plugins.ide.idea.model.IdeaModel
import org.gradle.testfixtures.ProjectBuilder
import org.jetbrains.gradle.ext.ModuleSettings
import org.jetbrains.gradle.ext.PackagePrefixContainer

/**
 * A simple unit test for the 'uk.org.lidalia.ideaext' plugin.
 */
class LidaliaIdeaExtPluginTest : StringSpec({
  "plugin defaults package prefix to module name" {
    // Create a test project and apply the plugin
    val project = ProjectBuilder.builder().withName("somename").build()
    project.group = "com.example.somegroup"
    project.plugins.apply("org.jetbrains.kotlin.jvm")
    project.plugins.apply("uk.org.lidalia.ideaext")

    // Verify the result

    val ideaModel = project.ideaModel
    val settings: ModuleSettings by (ideaModel.module as ExtensionAware).extensions
    val packagePrefix: PackagePrefixContainer by (settings as ExtensionAware).extensions

    packagePrefix shouldBe mapOf(
      "src/main/resources" to "com.example.somegroup.somename",
      "src/main/java" to "com.example.somegroup.somename",
      "src/main/kotlin" to "com.example.somegroup.somename",
      "src/test/resources" to "com.example.somegroup.somename",
      "src/test/java" to "com.example.somegroup.somename",
      "src/test/kotlin" to "com.example.somegroup.somename",
    )
  }

  "plugin can set package prefix" {
    // Create a test project and apply the plugin
    val project = ProjectBuilder.builder().withName("somename").build()
    project.group = "com.example.somegroup"
    project.plugins.apply("org.jetbrains.kotlin.jvm")
    project.plugins.apply("uk.org.lidalia.ideaext")

    // Verify the result

    val ideaModel = project.ideaModel
    val ideaModelExt = ideaModel as ExtensionAware

    @Suppress("UNCHECKED_CAST")
    val setPackagePrefix = ideaModelExt.extensions.findByName("setPackagePrefix") as (String) -> Unit
    setPackagePrefix("com.example.somethingelse")

    val settings: ModuleSettings by (ideaModel.module as ExtensionAware).extensions
    val packagePrefix: PackagePrefixContainer by (settings as ExtensionAware).extensions
    packagePrefix shouldBe mapOf(
      "src/main/resources" to "com.example.somethingelse",
      "src/main/java" to "com.example.somethingelse",
      "src/main/kotlin" to "com.example.somethingelse",
      "src/test/resources" to "com.example.somethingelse",
      "src/test/java" to "com.example.somethingelse",
      "src/test/kotlin" to "com.example.somethingelse",
    )
  }
})

private val Project.ideaModel get() = extensions.getByType(IdeaModel::class.java)
